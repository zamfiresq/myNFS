/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include "nfs.h"

bool_t
xdr_request(XDR *xdrs, request *objp)
{

	if (!xdr_string(xdrs, &objp->filename, FILENAME_LENGTH))
		return (FALSE);
	if (!xdr_int(xdrs, &objp->size))
		return (FALSE);
	if (!xdr_int(xdrs, &objp->src_offset))
		return (FALSE);
	if (!xdr_int(xdrs, &objp->dest_offset))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_chunk(XDR *xdrs, chunk *objp)
{

	if (!xdr_string(xdrs, &objp->filename, FILENAME_LENGTH))
		return (FALSE);
	if (!xdr_bytes(xdrs, (char **)&objp->data.data_val, (u_int *)&objp->data.data_len, DATA_LENGTH))
		return (FALSE);
	if (!xdr_int(xdrs, &objp->size))
		return (FALSE);
	if (!xdr_int(xdrs, &objp->dest_offset))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_opendir_args(XDR *xdrs, opendir_args *objp)
{

	if (!xdr_string(xdrs, &objp->dirname, DIRNAME_LENGTH))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_readdir_args(XDR *xdrs, readdir_args *objp)
{

	if (!xdr_string(xdrs, &objp->dirname, DIRNAME_LENGTH))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_readdir_result(XDR *xdrs, readdir_result *objp)
{

	if (!xdr_string(xdrs, &objp->filenames, MAX_FILENAMES_LENGTH))
		return (FALSE);
	if (!xdr_bool(xdrs, &objp->more))
		return (FALSE);
	return (TRUE);
}
